@inject IJSRuntime JS
@implements IDisposable

<div id="@_wrapperId" @ref="_wrapperDiv">
    <BECanvas Width="@_width" Height="@_height" @ref="_canvasReference"></BECanvas>
</div>

<style>
    #seed-renderer-wrapper {
        height: 100%;
        width: 100%;
        display: flex
    }
</style>

@code
    {
    private Canvas2DContext _context;
    private string _wrapperId = "seed-renderer-wrapper";
    private long _width = 640;
    private long _height = 360;
    private DotNetObjectReference<SeedRenderer> _objRef;
    private bool _firstRender = true;
    private Canvas2DSeedRenderer _seedRenderer;

    protected BECanvasComponent _canvasReference;
    protected ElementReference _wrapperDiv;

    [JSInvokable()]
    public void OnWrapperResize(float width, float height)
    {
        _width = (long)width;
        _height = (long)height;

        _seedRenderer.SetViewportScale(new Vector2(width, height));

        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        _seedRenderer = new Canvas2DSeedRenderer(_context, new Plant());
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (_firstRender)
        {
            _firstRender = false;
            _objRef = DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("AddResizeListener", _wrapperId, _objRef, "OnWrapperResize");
        }

        _context = await _canvasReference.CreateCanvas2DAsync();
        _seedRenderer.Context = _context;

        await _context.SetFillStyleAsync("white");
        await _context.SetStrokeStyleAsync("white");

        await _seedRenderer.RenderAsync();
    }

    public void Dispose()
    {
        _objRef?.Dispose();
    }
}
